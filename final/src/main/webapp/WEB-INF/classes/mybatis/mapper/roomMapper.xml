<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="room">

	<select id="roomSeq" resultType="Integer">
		SELECT room_seq.NEXTVAL FROM
		dual
	</select>


	<insert id="insertRoom" parameterType="com.sp.app.room.Room">
		INSERT INTO room(num,
		userId, subject, content, register_date) VALUES
		( #{num}, #{userId},
		#{subject},#{content}, SYSDATE )
	</insert>


	<insert id="insertRoomlist" parameterType="com.sp.app.room.Room">
		INSERT INTO
		roomlist(num,addr1, addr2, dealtype, depo, mrent, adcost, aditem,
		totfloor, corfloor, roomtype, m2, pyeoug, elev, park, options,
		movedate, mainimg) VALUES
		( #{num}, #{addr1}, #{addr2, jdbcType=VARCHAR},
		#{dealtype}, #{depo},
		#{mrent}, #{adcost}, #{aditem}, #{totfloor},
		#{corfloor}, #{roomtype},
		#{m2}, #{pyeoug}, #{elev}, #{park},
		#{options}, #{movedate}, #{mainimg})
	</insert>



	<!--내용 + 제목에 동네 있으면 검색되게 -->
	<sql id="where-list">
		<choose>
			<when test="keyword != null and keyword!='' ">
				( INSTR(subject, #{keyword}) &gt; 0
				OR
				INSTR(addr1,
				#{keyword}) &gt; 0
				OR
				INSTR(addr2, #{keyword}) &gt; 0
				OR
				DBMS_LOB.INSTR(content, #{keyword}) &gt; 0 )
			</when>
		</choose>
	</sql>
	
	<sql id="where-list2">
		<choose>
			<when test="roomtype != null and roomtype !='' ">
				( INSTR(#{roomtype},roomtype) &gt; 0
				OR
				INSTR(#{roomtype}, corfloor) &gt; 0)
			</when>
		</choose>
	</sql>

	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM room r
		JOIN member1 m ON r.userId =
		m.userId
		LEFT OUTER JOIN
		roomlist b ON
		b.num=r.num
		<where>
			<if test="keyword!=null and keyword!=''">
				<include refid="where-list" />
			</if>
			<if test="roomtype!=null and roomtype!=''">
				<if test="keyword!=null and keyword!=''">
					OR
				</if>
				<include refid="where-list2" />
			</if>
		</where>
	</select>


	<select id="listRoom" parameterType="map"
		resultType="com.sp.app.room.Room"> <!-- map에는 condition, keyword, offset, rows 등이 저장되어 넘어온다 -->
		SELECT b.num, b.userId, subject, content, register_date, addr1, addr2,
		dealtype, depo, mrent, adcost, aditem, totfloor, corfloor, roomtype,
		m2, pyeoug, elev, park, options, movedate,mainimg
		FROM room b
		LEFT OUTER JOIN
		member1 m ON b.userId = m.userId
		LEFT OUTER JOIN
		roomlist r ON
		b.num=r.num
		<where>
			<if test="keyword!=null and keyword!=''">
				<include refid="where-list" />
			</if>
			<if test="roomtype!=null and roomtype!=''">
				<if test="keyword!=null and keyword!=''">
					OR
				</if>
				<include refid="where-list2" />
			</if>
		</where>
		ORDER BY num DESC
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>


	<select id="readRoom" parameterType="Integer"
		resultType="com.sp.app.room.Room">
		SELECT b.num, b.userId, subject, content, register_date,
		addr1, addr2, dealtype, depo, mrent, adcost, aditem, totfloor,
		corfloor, roomtype, m2, pyeoug, elev, park, options, movedate, mainimg
		FROM room
		b
		LEFT OUTER JOIN member1 m ON b.userId = m.userId
		LEFT OUTER JOIN
		roomlist r ON b.num=r.num
		WHERE b.num=#{num}
	</select>

	<update id="updateRoom" parameterType="com.sp.app.room.Room">
		UPDATE room SET
		subject=#{subject}, content=#{content}
		WHERE num=#{num}
	</update>
	<update id="updateRoomlist" parameterType="com.sp.app.room.Room">
		UPDATE roomlist SET
		addr1=#{addr1}, addr2=#{addr2, jdbcType=VARCHAR},
		dealtype=#{dealtype, jdbcType=VARCHAR}, depo=#{depo}, mrent=#{mrent},
		adcost=#{adcost},
		aditem=#{aditem}, totfloor=#{totfloor}, corfloor=#{corfloor},
		roomtype=#{roomtype}, m2=#{m2}, pyeoug=#{pyeoug}, elev=#{elev},
		park=#{park}, options=#{options}, movedate=#{movedate}, mainimg=#{mainimg}
		WHERE num=#{num}
	</update>

	<update id="updateRoomlist2" parameterType="com.sp.app.room.Room">
		UPDATE roomlist SET
		addr1=#{addr1}, addr2=#{addr2, jdbcType=VARCHAR},
		dealtype=#{dealtype, jdbcType=VARCHAR}, depo=#{depo}, mrent=#{mrent},
		adcost=#{adcost},
		aditem=#{aditem}, totfloor=#{totfloor}, corfloor=#{corfloor},
		roomtype=#{roomtype}, m2=#{m2}, pyeoug=#{pyeoug}, elev=#{elev},
		park=#{park}, options=#{options}, movedate=#{movedate}
		WHERE num=#{num}
	</update>
	
	<delete id="deleteRoom" parameterType="Integer">
		DELETE FROM room WHERE
		num=#{num}
	</delete>
	<delete id="deleteRoomlist" parameterType="Integer">
		DELETE FROM roomlist
		WHERE
		num=#{num}
	</delete>
	
	<!-- 파일 -->
	<insert id="insertFile" parameterType="com.sp.app.room.Room">
		INSERT INTO roomfile(fileNum, num, saveFile) VALUES
				(roomFile_seq.NEXTVAL, #{num}, #{saveFile})
	</insert>
	
	<select id="listFile" parameterType="Integer" resultType="com.sp.app.room.Room">
		SELECT fileNum, num, saveFile
		FROM roomfile
		WHERE num=#{num}    
	</select>
	
	<select id="readFile" parameterType="Integer" resultType="com.sp.app.room.Room">
		SELECT fileNum, num, saveFile
		FROM roomfile
	    WHERE fileNum=#{fileNum}      
	</select>
	
	<delete id="deleteFile" parameterType="map">
		DELETE FROM roomfile WHERE ${field} = #{num}
	</delete>
	
	
	
	
	


	<!--       댓글              -->
	<!-- 댓글 등록 -->
	<insert id="insertReply" parameterType="com.sp.app.room.Reply">
		INSERT INTO room_reply(replyNum, num, userId, content, register_date, answer)
			VALUES(roomReply_seq.NEXTVAL, #{num}, #{userId}, #{content}, SYSDATE, #{answer})
	</insert>
	
	<!--게시글별 댓글 갯수 -->
	<select id="replyCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) 
		FROM room_reply
		WHERE num=#{num} AND answer=0
	</select>
	
	<!-- 댓글 리스트(전체x , 댓글마다) -->
	<!-- member에서 name /  댓글에서 댓글갯수 / 댓글좋아요에서 댓글번호+좋아요싫어요갯수-->
	<!-- 첫번째  LEFT OUTER JOIN : 댯글이 아닌, 대댓글의 부모넘+ 총갯수-->
	<!-- 두번째  LEFT OUTER JOIN : 대댓글의 부모넘(댓글넘) + 좋아요, 싫어요갯수-->
	<select id="listReply" parameterType="map" resultType="com.sp.app.room.Reply">
		SELECT r.replyNum, num, r.userId, userName, content, register_date,
		    NVL(answerCount, 0) answerCount
		FROM room_reply r
		JOIN member1 m ON r.userId=m.userId
		LEFT OUTER JOIN (
		    SELECT answer, COUNT(*) answerCount
		    FROM room_reply
		    WHERE answer!=0
		    GROUP BY answer
		) sr ON r.replyNum= sr.answer
		WHERE num=#{num} AND r.answer=0
		ORDER BY r.replyNum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>
	
	<!-- 댓글삭제(대댓글도) -->
	<delete id="deleteReply" parameterType="map">
		DELETE FROM room_reply
		WHERE replyNum = #{replyNum}
		<if test="mode=='reply'">
			OR answer=#{replyNum}
		</if>
	</delete>
	
	<!-- 대댓글 리스트-->
	<select id="listReplyAnswer" parameterType="Integer" resultType="com.sp.app.room.Reply">
		SELECT replyNum, num, r.userId, content, register_date, answer, m.userName    
		FROM room_reply r
		JOIN member1 m ON r.userId = m.userId
		WHERE answer = #{answer}
		ORDER BY replyNum DESC
	</select>
	
	<!-- 댓글의 답글개수 -->
	<select id="replyAnswerCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM room_reply 
		WHERE answer = #{answer}
	</select>



</mapper>