<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dress">
	<insert id="insertDress" parameterType="com.sp.app.dress.Dress">
		INSERT INTO clothesStory(
			num, userId, subject, content, hashtag, register_date, hitCount)
		VALUES(clothesStory_seq.NEXTVAL, #{userId},#{subject}, #{content},
			#{hashtag,jdbcType=VARCHAR}, SYSDATE, 0)
	</insert>

	<select id="listDress" parameterType="map"
		resultType="com.sp.app.dress.Dress">
		SELECT b.num, b.userId, userName , subject,hashtag,
		HITCOUNT,TO_CHAR(REGISTER_DATE,'YYYY-MM-DD')created,
		content, NVL(replyCount, 0)replyCount
		FROM CLOTHESSTORY b
		JOIN member1 m ON b.userId = m.userId
		LEFT OUTER JOIN(
			SELECT num, COUNT(*) replyCount FROM clothesStory_reply
				WHERE answer = 0
			GROUP BY num
		)c ON b.num=c.num
		
		<where>
			<if test="keyword!=null and keyword!=''">
				<include refid="where-list"></include>
			</if>
		</where>
			ORDER BY num DESC
			OFFSET #{offset} ROWS
			FETCH FIRST #{rows} ROWS ONLY
	</select>
	<sql id="where-list">
		<choose>
				<when test="condition=='all' ">
				( INSTR(subject, #{keyword}) &gt; 0 
					OR DBMS_LOB.INSTR(content, #{keyword}) &gt; 0 )
			</when>
			<when test="condition=='created'">
				(TO_CHAR(created,'YYYYMMDD')= #{keyword} OR TO_CHAR(created,'YYYY-MM-DD')=#{keyword} ) 
			</when>
			<when test="condition=='content'">
				DBMS_LOB.INSTR(content, #{keyword}) &gt; 0
			</when>
			<otherwise>
				INSTR(${condition}, #{keyword}) &gt; 0
			</otherwise>
		</choose>
	</sql>

	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT  NVL(COUNT(*), 0)  FROM clothesStory b
			JOIN member1 m ON b.userId= m.userId
			<where>
				<if test="keyword!=null and keyword!=''">
					<include refid="where-list"/>
				</if>
			</where>
	</select>
	
	<update id="updateHitCount" parameterType="Integer">
		UPDATE clothesStory SET HitCount= HitCount+1 WHERE num=#{num}
	</update>
	
	<select id="readDress" parameterType="Integer" resultType="com.sp.app.dress.Dress">	
		
		SELECT b.num, subject, hashtag, userName, b.userId, content, b.register_date, HitCount, NVL(replyCount,0)replyCount, NVL(DressLikeCount,0)DressLikeCount
		FROM clothesStory b
		JOIN member1 m ON b.userId = m.userId
		LEFT OUTER JOIN(
			SELECT num, COUNT(*)replyCount FROM clothesStory_reply
			WHERE answer=0 
			GROUP BY num 
		)c ON b.num=c.num	
		LEFT OUTER JOIN(
			SELECT num ,COUNT(*)DressLikeCount FROM clothesStory_like
			GROUP BY num 
		)d ON b.num=d.num	
		WHERE b.num = #{num}
	</select>
	
	<update id="updateDress" parameterType="com.sp.app.dress.Dress">
		UPDATE clothesStory SET subject=#{subject}, content=#{content}, hashtag=#{hashtag}
		WHERE num= #{num}
	</update>
	
	<delete id="deleteDress" parameterType="Integer">
		DELETE FROM CLOTHESSTORY WHERE num= #{num}
	</delete>
	<!--댓글 인서트 하기  -->
	<insert id="insertDressReply" parameterType="com.sp.app.dress.DressReply">
		INSERT INTO clothesStory_reply(replyNum,num,userId,content,register_date ,answer)
		VALUES(clothesStoryR_seq.NEXTVAL,#{num},#{userId},#{content},SYSDATE,#{answer})
	</insert>
	
	
	<select id="listReply" parameterType="map" resultType="com.sp.app.dress.DressReply">
		SELECT r.replyNum, r.userId, userName, num, content, r.register_date, NVL(answerCount, 0) answerCount
			FROM CLOTHESSTORY_REPLY r
			JOIN member1 m on r.userId = m.userId
		LEFT OUTER JOIN (
			SELECT answer, COUNT(*) answerCount
			FROM CLOTHESSTORY_REPLY WHERE answer!=0 GROUP BY answer
		) a ON r.replyNum = a.answer
			WHERE num=#{num} AND r.answer=0
			ORDER BY r.replyNum DESC
			OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>
	
	<select id="DressReplyCount" parameterType="map" resultType="Integer">
	SELECT NVL(COUNT (*),0) FROM clothesStory_reply
	WHERE  num = #{num} AND answer=0
	</select>
	
	<delete id="deleteDressReply" parameterType="map">
			DELETE FROM CLOTHESSTORY_REPLY
			WHERE replyNum = #{replyNum}
			<if test="mode=='DressReply'">
			OR answer=#{replyNum}
		</if>
	</delete>
	
	<insert id="insertDressLikeCount" parameterType="map">
	INSERT INTO clothesStory_like(num,userId)VALUES(#{num},#{userId}) 
	</insert>
	
	<select id="DressLikeCount" parameterType="Integer" resultType="Integer">
	SELECT COUNT(*) FROM clothesStory_like
	WHERE num=#{num}
	</select>
	<delete id="deleteDressLikeCount" parameterType="map">
		DELETE FROM clothesStory_like WHERE num=#{num} AND userId=#{userId}
	</delete>
	
	<!--bestDressList  -->
	<select id="bestlist" parameterType="map" resultType="com.sp.app.dress.Dress">
		SELECT A.* FROM(SELECT b.num, b.userId, userName , subject,hashtag,
					HITCOUNT,TO_CHAR(REGISTER_DATE,'YYYY-MM-DD')created,
					content, NVL(replyCount, 0)replyCount,NVL(v, 0)v
					FROM CLOTHESSTORY b
				JOIN member1 m ON b.userId = m.userId
				LEFT OUTER JOIN(
							SELECT num, COUNT(*) replyCount FROM clothesStory_reply
							WHERE answer = 0
							GROUP BY num
					)c ON b.num=c.num
				LEFT OUTER JOIN (
							SELECT num ,COUNT(*)v FROM CLOTHESSTORY_LIKE GROUP BY num ORDER BY v DESC
					)d ON b.num= d.num
		ORDER BY v DESC )A
		WHERE ROWNUM=1
	</select>
	<!--댓글에 댓글 리스트  -->
	 <select id="listReplyAnswer" parameterType="Integer" resultType="com.sp.app.dress.DressReply">
	 	SELECT content, userName ,a.userId, REGISTER_DATE, num, replyNum,answer
		FROM CLOTHESSTORY_REPLY a 
			JOIN member1 m ON a.userId= m.userId
			WHERE answer = #{answer}
		ORDER BY replyNum DESC
	 </select>
	 <!--answerCount 댓글에 댓글 개수 -->
	<select id="answerCount" parameterType="Integer" resultType="Integer">
			SELECT NVL(COUNT(*),0) FROM CLOTHESSTORY_REPLY WHERE answer = #{answer}
	</select>
</mapper>