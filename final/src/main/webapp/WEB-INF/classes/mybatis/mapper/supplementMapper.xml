<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="supplement">
	<!-- 인서트 -->
	<insert id="insertSupplement" parameterType="com.sp.app.supplement.Supplement">
		INSERT INTO supplement(num, userId, subject, content, hashtag, register_date, hitCount, imageFilename)
			VALUES(supplement_seq.NEXTVAL, #{userId}, #{subject}, #{content}, 
				 #{hashtag, jdbcType=VARCHAR}, SYSDATE, 0, #{imageFilename, jdbcType=VARCHAR})
	</insert>
	

	<!--  검색  -->
	<sql id="where-list">
		<choose>
			<when test="condition=='all'">
				(INSTR(subject, #{keyword}) &gt; 0 OR DBMS_LOB.INSTR(content, #{keyword})  &gt; 0)
			</when>
			<when test="condition=='register_date'">
				(TO_CHAR(register_date, 'YYYYMMDD') = #{keyword} 
					OR TO_CHAR(register_date, 'YYYY-MM-DD') = #{keyword})
			</when>
			<when test="condition=='cotent'">
				DBMS_LOB.INSTR(content, #{keyword}) &gt; 0
			</when>
			<otherwise>
				INSTR(#{condition}, #{keyword}) &gt; 0
			</otherwise>
		</choose>
	</sql>
	
	<!-- 글 리스트  -->
	<select id="listSupplement" parameterType="map" resultType="com.sp.app.supplement.Supplement">
		SELECT s.num, s.userId, userName, subject, TO_CHAR(register_date, 'YYYY-MM-DD') register_date, hitCount, imageFilename, 
   			 NVL(likeCount, 0) likeCount, 
   			 NVL(replyCount, 0) replyCount
		FROM supplement s
		JOIN member1 m ON s.userId = m.userId 
		LEFT OUTER JOIN(
			SELECT num, COUNT(*) likeCount 
			FROM supplement_like
			GROUP BY num
		) slk ON s.num = slk.num
		LEFT OUTER JOIN (
			SELECT num, COUNT(*) replyCount 
			FROM supplement_reply 
			WHERE answer = 0
			GROUP BY num
		) sr ON s.num = sr.num
		<where>
			<if test="keyword !=null and keyword !=''">
				<include refid="where-list"/>
			</if>
		</where>
		ORDER BY s.num DESC
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>
	
	<!-- 글갯수 -->
	<!-- 이거 왜 조인해야돼? => 검색때문에-->
	<select id="dataCount" parameterType="Map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM supplement s
		JOIN member1 m ON s.userId=m.userId
		<where>
			<if test="keyword!=null and keyword!=''">
				<include refid="where-list"/>
			</if>
		</where>
	</select>
	
	<update id="updateHitCount" parameterType="Integer">
		UPDATE supplement SET hitCount=hitCount+1 WHERE num=#{num}
	</update>
	
	<!-- 베스트 리스트-->
	<select id="listSupplementBest" resultType="com.sp.app.supplement.Supplement">
		select num, userId, userName, subject, imageFilename, 
		         likeCount
		from (
		    SELECT s.num, s.userId, userName, subject, TO_CHAR(register_date, 'YYYY-MM-DD') register_date, hitCount, imageFilename, 
		         NVL(likeCount, 0) likeCount
		    FROM supplement s
		    JOIN member1 m ON s.userId = m.userId 
		    LEFT OUTER JOIN(
		        SELECT num, COUNT(*) likeCount 
		        FROM supplement_like
		        GROUP BY num
		    ) slk ON s.num = slk.num
		    ORDER BY likeCount DESC
		)<![CDATA[WHERE rownum <= 4]]>
	</select>
	
	<!-- 게시글 추천 추가(like) -->
	<insert id="insertSupplementLike" parameterType="map">
		INSERT INTO supplement_like(num, userId) VALUES(#{num}, #{userId})
	</insert>
	
	<!-- 게시글 추천 취소(like) -->
	<delete id="deleteSupplementLike" parameterType="map">
		DELETE FROM supplement_like WHERE num=#{num} AND userId=#{userId}
	</delete>
	
	<!-- 게시글 추천수 -->
	<select id="supplementLikeCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) FROM supplement_like WHERE num=#{num}
	</select>
	
	<!-- 게시글보기 -->
	<select id="readSupplement" parameterType="Integer" resultType="com.sp.app.supplement.Supplement">
		SELECT s.num, s.userId, userName, subject, content, hitCount, register_date, imageFilename, 
			NVL(likeCount, 0) likeCount
		FROM supplement s
		JOIN member1 m ON s.userId = m.userId
		LEFT OUTER JOIN (
			SELECT num, COUNT(*) likeCount
			FROM supplement_like 
			GROUP BY num
		) slk ON s.num = slk.num
		WHERE s.num=#{num}
	</select>
	
	<!-- 게시글 삭제 -->
	<delete id="deleteSupplement" parameterType="Integer">
		DELETE FROM supplement WHERE num=#{num} 
	</delete>
	
	<!-- 게시글 수정 -->
	<update id="updateSupplement" parameterType="com.sp.app.supplement.Supplement">
		UPDATE supplement SET subject=#{subject}, content=#{content}, imageFilename=#{imageFilename}
		WHERE num=#{num}
	</update>
	
	<!-- 이전글, 다음글 -->
	<select id="preReadSupplement" parameterType="map" resultType="com.sp.app.supplement.Supplement">
		SELECT num, subject
		FROM supplement s
		JOIN member1 m ON s.userId=m.userId
		<where>
			<if test="keyword!=null and keyword!=''">
				<include refid="where-list"/>
			</if>
			AND (num &gt; #{num})
		</where>
		ORDER BY num ASC
		FETCH FIRST 1 ROWS ONLY
	</select>
	
	<select id="nextReadSupplement" parameterType="map" resultType="com.sp.app.supplement.Supplement">
		SELECT num, subject
		FROM supplement s
		JOIN member1 m ON s.userId=m.userId
		<where>
			<if test="keyword!=null and keyword!=''">
				<include refid="where-list"/>
			</if>
			AND (num &lt; #{num})
		</where>
		ORDER BY num DESC
		FETCH FIRST 1 ROWS ONLY
	</select>
	
	<!--       댓글              -->
	<!-- 댓글 등록 -->
	<insert id="insertReply" parameterType="com.sp.app.supplement.Reply">
		INSERT INTO supplement_reply(replyNum, num, userId, content, register_date, answer)
			VALUES(supplementReply_seq.NEXTVAL, #{num}, #{userId}, #{content}, SYSDATE, #{answer})
	</insert>
	
	<!--게시글별 댓글 갯수 -->
	<select id="replyCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) 
		FROM supplement_reply
		WHERE num=#{num} AND answer=0
	</select>
	
	<!-- 댓글 리스트(전체x , 댓글마다) -->
	<!-- member에서 name /  댓글에서 댓글갯수 / 댓글좋아요에서 댓글번호+좋아요싫어요갯수-->
	<!-- 첫번째  LEFT OUTER JOIN : 댯글이 아닌, 대댓글의 부모넘+ 총갯수-->
	<!-- 두번째  LEFT OUTER JOIN : 대댓글의 부모넘(댓글넘) + 좋아요, 싫어요갯수-->
	<select id="listReply" parameterType="map" resultType="com.sp.app.supplement.Reply">
		SELECT r.replyNum, num, r.userId, userName, content, register_date,
		    NVL(answerCount, 0) answerCount,
		    NVL(likeCount, 0) likeCount,
		    NVL(disLikeCount, 0) disLikeCount
		FROM supplement_reply r
		JOIN member1 m ON r.userId=m.userId
		LEFT OUTER JOIN (
		    SELECT answer, COUNT(*) answerCount
		    FROM supplement_reply
		    WHERE answer!=0
		    GROUP BY answer
		) sr ON r.replyNum= sr.answer
		LEFT OUTER JOIN (
		    SELECT replyNum,
		        COUNT(DECODE(replyLike, 1, 1)) likeCount,
		        COUNT(DECODE(replyLike, 10, 1)) disLikeCount
		    FROM supplement_reply_like
		    GROUP BY replyNum
		) srl ON r.replyNum = srl.replyNum
		WHERE num=#{num} AND r.answer=0
		ORDER BY r.replyNum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>
	
	<!-- 댓글삭제(대댓글도) -->
	<delete id="deleteReply" parameterType="map">
		DELETE FROM supplement_reply
		WHERE replyNum = #{replyNum}
		<if test="mode=='reply'">
			OR answer=#{replyNum}
		</if>
	</delete>
	
	<!-- 대댓글 리스트-->
	<select id="listReplyAnswer" parameterType="Integer" resultType="com.sp.app.supplement.Reply">
		SELECT replyNum, num, r.userId, content, register_date, answer    
		FROM supplement_reply r
		JOIN member1 m ON r.userId = m.userId
		WHERE answer = #{answer}
		ORDER BY replyNum DESC
	</select>
	
	<!-- 댓글의 답글개수 -->
	<select id="replyAnswerCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM supplement_reply 
		WHERE answer = #{answer}
	</select>
	
	<!-- 댓글 좋아요/싫어요 추가   -->		
	<insert id="insertReplyLike" parameterType="map">
		INSERT INTO supplement_reply_like(replyNum, userId, replyLike) 
		VALUES(#{replyNum}, #{userId}, #{replyLike})
	</insert>
	
	<!-- 댓글 좋아요/ 싫어요 취소 -->
	<delete id="deleteReplyLike" parameterType="map">
		DELETE FROM supplement_reply_like 
		WHERE replyNum=#{replyNum} AND userId=#{userId} AND replyLike=#{replyLike}
	</delete>
	
	<!-- 댓글 좋아요/싫어요 갯수-->
	<select id="replyLikeCount" parameterType="map" resultType="map">
		SELECT COUNT(DECODE(replyLike, 1, 1)) likeCount,
			   COUNT(DECODE(replyLike, 0, 1)) disLikeCount  
		FROM supplement_reply_like 
		WHERE replyNum=#{replyNum}
	</select>
</mapper>