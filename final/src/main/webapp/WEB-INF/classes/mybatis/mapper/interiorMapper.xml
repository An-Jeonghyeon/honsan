<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="interior">
	
	<select id="seq" resultType="Integer">
		SELECT interior_seq.NEXTVAL FROM dual
	</select>
	<!-- 인테리어 게시판 추가  -->
	<insert id="insertInterior" parameterType="com.sp.app.interior.Interior">
		INSERT INTO interior(num, userId, subject, content, category, hitCount, register_date , mainImg)
				VALUES(#{num}, #{userId}, #{subject}, #{content}, #{category}, 0, SYSDATE , #{mainImg})
	</insert>
<!-- 파일 DB에 넣어주는 seq -->
	<select id="interiorfile_seq" resultType="Integer">
		SELECT InteriorFile_seq.NEXTVAL FROM dual
	</select>
<!-- 인테리어 서브 사진들 테이블  -->
   <insert id="interiorFile" parameterType="com.sp.app.interior.Interior">
      INSERT INTO interiorFile(Filenum, num, main ,saveFilename)
         VALUES (#{filenum}, #{num}, #{mainnum} ,#{saveFilename})
   </insert>
  
   <!-- where 조건문 만들기  -->
	<sql id="where-list">
		<choose>

			<otherwise>
				( INSTR(subject, #{keyword}) &gt; 0 
					OR DBMS_LOB.INSTR(content, #{keyword}) &gt; 0 
					OR INSTR(i.userId , #{keyword}) &gt; 0 
					OR INSTR(category , #{keyword}) &gt; 0 
					OR TO_CHAR(register_date, 'YYYYMMDD') = #{keyword} )				
			</otherwise>
			
		</choose>
	</sql>
	
	<!-- 게시판 총 수  -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) 
		FROM interior
			<where>
				<if test="keyword!=null and keyword!=''">
						<include refid="where-list"/>
				</if>
			</where>
	</select>
	
	<!-- 인테리어 게시판 리스트  -->
	<select id="interiorlist" parameterType="map"
		resultType="com.sp.app.interior.Interior"> <!-- map에는 condition, keyword, offset, rows 등이 저장되어 넘어온다 -->
	
		SELECT i.num, i.userId, userName, subject, content, category, hitCount, register_date, mainImg,
        NVL(interiorLikeCount, 0) interiorLikeCount, interiorZzimCount ,
        replycontent , replyuserId ,replyCount , profileImg , replyProfileImg
		FROM interior i
		JOIN member1 m ON i.userId = m.userId
		LEFT OUTER JOIN (
			SELECT num, COUNT(*) interiorLikeCount 
			FROM interior_like
			GROUP BY num
		) c ON i.num = c.num
		LEFT OUTER JOIN (
			SELECT num, COUNT(*) interiorZzimCount 
			FROM interior_Zzim
			GROUP BY num
		) z ON i.num = z.num
        LEFT OUTER JOIN (
            SELECT n.replyNum , n.num , content AS replycontent ,userid AS replyuserId ,replyCount
            FROM interior_reply n
            join (
            SELECT count(*) replyCount, max(replyNum) replyNum, num  FROM interior_reply 
            where answer = 0
            GROUP BY num ) b on n.replyNum = b.replyNum
        ) n ON i.num = n.num
        LEFT OUTER JOIN (
            SELECT userId , profileImg FROM memberProfile
        ) p on i.userId = p.userId
        LEFT OUTER JOIN (
            SELECT userId , profileImg as replyProfileImg FROM memberProfile
        ) pp on replyuserId = pp.userId
        <where>
			<if test="keyword!=null and keyword!=''">
				<include refid="where-list"/>
			</if>
		</where>
        ORDER BY i.num DESC
        OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>
	<!-- 유저의 인테리어 게시판 리스트  -->
	<select id="userinteriorlist" parameterType="map"
		resultType="com.sp.app.interior.Interior"> <!-- map에는 condition, keyword, offset, rows 등이 저장되어 넘어온다 -->
		SELECT i.num, i.userId, userName, subject, content, category, hitCount, register_date , mainImg
		FROM interior i
		JOIN member1 m ON i.userId = m.userId
		WHERE i.userId = #{userId}
		ORDER BY i.num DESC
		
		<if test="rows==4">
			OFFSET 0 ROWS FETCH FIRST #{rows} ROWS ONLY
		</if>
		
	</select>
	<!-- 게시판번호로 게시판 찾기  -->
	<select id="readBoard" parameterType="Integer" resultType="com.sp.app.interior.Interior">
		SELECT num, i.userId,userName, subject, content, category, hitCount, register_date ,mainImg , profileImg
		FROM interior i
		JOIN member1 m ON i.userId = m.userId
		LEFT OUTER JOIN (
        SELECT userId , profileImg FROM memberProfile
        )p ON i.userId = p.userId
		WHERE num = #{num}
	</select>
	<!-- 인테리어 서브이미지 불러오기  -->
	<select id="readBoardImg" parameterType="Integer" resultType="com.sp.app.interior.Interior">
		Select filenum , num , saveFilename 
		FROM InteriorFile 
		WHERE num = #{num}
		ORDER BY num
	</select>
	<!-- 접속시 조회수 +1  -->
	<update id="updateHitCount" parameterType="Integer">
		UPDATE interior SET hitCount = hitCount+1 WHERE num=#{num} 
	</update>
	
	<select id="readFile" parameterType="Integer" resultType="com.sp.app.interior.Interior">
		SELECT fileNum, num, saveFilename
		FROM InteriorFile
	    WHERE fileNum=#{filenum}      
	</select>
	<!-- 선택 파일 삭제  -->
	<delete id="deleteFile" parameterType="map">
		DELETE FROM InteriorFile WHERE ${field} = #{num}
	</delete>
 <!-- 메인이미지 수정시 -->
	<update id="interiorUpdate2" parameterType="com.sp.app.interior.Interior">
		UPDATE interior SET subject = #{subject} , content= #{content} , category= #{category} , mainImg = #{mainImg}
		WHERE num=#{num}
	</update>	
	<!-- 메인이미지 수정 하지 않을시 -->
	<update id="interiorUpdate1" parameterType="com.sp.app.interior.Interior">
		UPDATE interior SET subject = #{subject} , content= #{content} , category= #{category} 
		WHERE num=#{num}
	</update>
	
	<delete id="deleteBoard" parameterType="map">
		DELETE FROM interior
		WHERE num=#{num}
	</delete>
	
	
	
	
	<!--   -->
	<!-- 좋아요 추가 -->
	<insert id="insertInteriorLike" parameterType="map">
		INSERT INTO interior_like(num, userId) VALUES (#{num}, #{userId})
	</insert>
      
	<!-- 게시글 좋아요 개수 -->
	<select id="interiorLikeCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) FROM interior_like WHERE num=#{num}
	</select>

	<!-- 유저당 게시글 좋아요 여부 확인 -->
	<select id="readInteriorLike" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0) FROM interior_like WHERE num=#{num} AND userId=#{userId}
	</select>
	
	<!-- 게시글 좋아요 삭제 -->
	<delete id="deleteInteriorLike" parameterType="map">
		DELETE FROM interior_like WHERE num=#{num} AND userId=#{userId}
	</delete>
	
	
	
	
	
	
	<!--   -->
	<!-- 찜 추가 -->
	<insert id="insertInteriorZzim" parameterType="map">
		INSERT INTO interior_zzim(num, userId) VALUES (#{num}, #{userId})
	</insert>
      
	<!-- 찜 개수 -->
	<select id="interiorZzimCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) FROM interior_zzim WHERE num=#{num}
	</select>

	<!-- 유저당 게시글 찜 여부 확인 -->
	<select id="readInteriorZzim" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0) FROM interior_zzim WHERE num=#{num} AND userId=#{userId}
	</select>
	
	<!-- 게시글 찜 취소 -->
	<delete id="deleteInteriorZzim" parameterType="map">
		DELETE FROM interior_zzim WHERE num=#{num} AND userId=#{userId}
	</delete>
	
	
	
	
	
	
	
	<!-- 댓글 등록  -->
	<insert id="insertInteriorReply" parameterType="com.sp.app.interior.Reply">
		INSERT INTO interior_reply (replyNum, num, userId, content, answer, register_date)
			VALUES (InteriorReply_seq.NEXTVAL, #{num}, #{userId}, #{content}, #{answer}, SYSDATE)
	</insert>	
	
	<!-- 리스트 수 -->
	<select id="interiorReplyCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) FROM interior_reply
		WHERE num=#{num} AND answer=0
	</select>
	
	<!-- 댓글 리스트 -->
	<select id="listInteriorReply" parameterType="map" resultType="com.sp.app.interior.Reply">
		SELECT replyNum, i.userId, userName, num, content, register_date
		FROM interior_reply i
		JOIN member1 m ON i.userId = m.userId
		WHERE num=#{num}  AND i.answer=0
		ORDER BY i.replyNum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>
	
	
	<!-- 리플 삭제 -->
	<delete id="deleteInteriorReply" parameterType="map">
		DELETE FROM interior_reply
		WHERE replyNum=#{replyNum}
		<if test="mode=='reply'">
			OR answer=#{replyNum}
		</if>
	</delete>
	
	<!-- 대댓글 리스트 -->
	<select id="listInteriorReplyAnswer" parameterType="Integer" resultType="com.sp.app.interior.Reply">
		SELECT replyNum, num, i.userId, userName, content, register_date, answer
		FROM interior_reply i
		JOIN member1 m ON i.userId = m.userId
		WHERE answer = #{answer}
		ORDER BY replyNum ASC
	</select>
</mapper>